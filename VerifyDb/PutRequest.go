// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package VerifyDb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PutRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsPutRequest(buf []byte, offset flatbuffers.UOffsetT) *PutRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PutRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPutRequest(buf []byte, offset flatbuffers.UOffsetT) *PutRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PutRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PutRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PutRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PutRequest) Entry(obj *Entry) *Entry {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Entry)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PutRequest) Conflict() Conflict {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Conflict(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *PutRequest) MutateConflict(n Conflict) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func PutRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PutRequestAddEntry(builder *flatbuffers.Builder, entry flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(entry), 0)
}
func PutRequestAddConflict(builder *flatbuffers.Builder, conflict Conflict) {
	builder.PrependInt8Slot(1, int8(conflict), 0)
}
func PutRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
